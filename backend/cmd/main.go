package main

import (
	"fmt"
	"log"
    "net/http"

    "github.com/gin-gonic/gin"
	"my_app_backend/internal/db"

    "github.com/swaggo/gin-swagger"
    "github.com/swaggo/files"
    _ "my_app_backend/docs"
)

// Error handler func
func handleError(c *gin.Context, statusCode int, message string) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Å –æ—à–∏–±–∫–æ–π
    c.JSON(statusCode, gin.H{
        "error": message,
    })
}

func main() {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db.ConnectDB()

	// Create new instance Gin
	router := gin.Default()

	// Add test endpoint
	router.GET("/ping", func(c *gin.Context) {
	    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
	        simulatedError := false
	        if simulatedError {
	            handleError(c, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
	            return // –í—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
	        }

            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    		c.JSON(http.StatusOK, gin.H{"message": "pong"})
    })

    // Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É /swagger/index.html
    router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

    // Launch server on 8080 port
    err := router.Run(":8080");
    if err != nil {
        log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ", err);
    }
}
