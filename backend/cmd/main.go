// @title Simple Swagger Example
// @version 1.0
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description backend API –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
// @host localhost:8080
// @BasePath /

package main

import (
	"fmt"
	"log"
    "net/http"

    "github.com/gin-gonic/gin"
    "github.com/swaggo/gin-swagger"
    "github.com/swaggo/files"
    _ "my_app_backend/docs"
    "my_app_backend/internal/db"
    "my_app_backend/internal/service"
    "my_app_backend/internal/repository"
    "my_app_backend/internal/controller"
    "my_app_backend/internal/middleware"
)

// Error handler func
func handleError(c *gin.Context, statusCode int, message string) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON —Å –æ—à–∏–±–∫–æ–π
    c.JSON(statusCode, gin.H{
        "error": message,
    })
}

// @Summary –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
// @ID ping
// @Description –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
// @Tags health
// @Produce json
// @Success 200 {object} map[string]string
// @Failure 500 {object} map[string]string
// @Router /ping [get]
func pingHandler(c *gin.Context) {
    simulatedError := false
    if simulatedError {
        c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"})
        return
    }
    c.JSON(http.StatusOK, gin.H{"message": "pong"})
}

func main() {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db.ConnectDB()
    fmt.Println("DB is nil?", db.GetDB() == nil)
	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Gin
	router := gin.Default()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∏–Ω–≥–∞
	router.GET("/ping", pingHandler)

	// Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É /swagger/index.html
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    userRepo := repository.NewUserRepository(db.GetDB())

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤–∏—Å —Ç–æ–∫–µ–Ω–æ–≤
    tokenService := service.NewTokenService()

    // –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    authService := service.NewAuthService(userRepo, tokenService, db.GetDB())

	// üîß –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	authController := controller.NewAuthController(authService)

	// üöÄ –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    authRoutes := router.Group("/auth")
    {
        authRoutes.POST("/register", authController.RegisterUserHandler)
        authRoutes.POST("/login", authController.LoginUserHandler)
        authRoutes.GET("/me", middleware.AuthMiddleware(tokenService), authController.MeHandler)
        authRoutes.POST("/logout", middleware.AuthMiddleware(tokenService), authController.LogoutHandler)
    }

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	if err := router.Run(":8080"); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ", err)
	}
}
