definitions:
  models.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: "123456"
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      nickname:
        example: CoolUser
        type: string
      password:
        example: "123456"
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      nickname:
        type: string
      subscription_status:
        type: string
    type: object
info:
  contact: {}
  title: Simple Swagger Example
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентификация пользователя по email и паролю, возвращает JWT-токен
      parameters:
      - description: Данные для входа
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешный вход и токен
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Неверный формат запроса
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Неверный email или пароль
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Вход пользователя
      tags:
      - auth
  /auth/logout:
    post:
      description: Инвалидирует токен на клиенте (сервер токены не хранит)
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Выход из системы
      tags:
      - auth
  /auth/me:
    get:
      description: Возвращает данные пользователя на основе JWT-токена
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Получить текущего пользователя
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Регистрирует нового пользователя по email, паролю и нику
      parameters:
      - description: Данные для регистрации
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Регистрация пользователя
      tags:
      - auth
securityDefinitions:
  BearerAuth:
    description: backend API для проекта
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
