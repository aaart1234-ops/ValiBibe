package middleware

import (
    "fmt"
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v5"
	"valibibe/internal/service"
)

// AuthMiddleware –ø—Ä–∏–Ω–∏–º–∞–µ—Ç TokenService –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç JWT
func AuthMiddleware(tokenService service.TokenService) gin.HandlerFunc {
    return func(c *gin.Context) {
        fmt.Println("üõ° –í–æ—à–ª–∏ –≤ AuthMiddleware")

        authHeader := c.GetHeader("Authorization")
        if authHeader == "" {
            fmt.Println("‚õîÔ∏è –ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization")
            c.JSON(http.StatusUnauthorized, gin.H{"error": "Missing Authorization header"})
            c.Abort()
            return
        }

        parts := strings.Split(authHeader, " ")
        if len(parts) != 2 || parts[0] != "Bearer" {
            fmt.Println("‚õîÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization")
            c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid Authorization header format"})
            c.Abort()
            return
        }

        tokenString := parts[1]
        token, err := tokenService.ValidateToken(tokenString)
        if err != nil || !token.Valid {
            fmt.Println("‚õîÔ∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω:", err)
            c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid token"})
            c.Abort()
            return
        }

        claims, ok := token.Claims.(jwt.MapClaims)
        if !ok || claims["user_id"] == nil {
            fmt.Println("‚õîÔ∏è Claims –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ")
            c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid token claims"})
            c.Abort()
            return
        }

        userIDStr, ok := claims["user_id"].(string)
        if !ok {
            fmt.Println("‚õîÔ∏è user_id –Ω–µ —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–æ–∫–µ–Ω–µ")
            c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid user_id in token"})
            c.Abort()
            return
        }

        fmt.Println("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, user_id:", userIDStr)
        c.Set("user_id", userIDStr)
        c.Next()
    }
}
