package controller

import (
    "fmt"
    "net/http"

	"github.com/gin-gonic/gin"
	"my_app_backend/internal/service"
)

// AuthController –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
type AuthController struct {
    authService service.AuthService
}

// NewAuthController —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
func NewAuthController(authService service.AuthService) *AuthController {
    return &AuthController{authService: authService}
}

// RegisterUserHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Summary –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Description –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email, –ø–∞—Ä–æ–ª—é –∏ –Ω–∏–∫—É
// @Tags auth
// @Accept json
// @Produce json
// @Param input body models.RegisterRequest true "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]string
// @Failure 500 {object} map[string]string
// @Router /auth/register [post]
func (c *AuthController) RegisterUserHandler(ctx *gin.Context) {
    var request struct {
        Email string `json:"email" binding:"required,email"`
        Password string `json:"password" binding:"required,min=6"`
        Nickname string `json:"nickname" binding:"required"`
    }

    // –ü–∞—Ä—Å–∏–º JSON-–∑–∞–ø—Ä–æ—Å
    if err := ctx.ShouldBindJSON(&request); err != nil {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
        return
    }

    // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    user, err := c.authService.RegisterUser(request.Email, request.Password, request.Nickname)
    if err != nil {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
        return
    }

	// –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	ctx.JSON(http.StatusOK, gin.H{
		"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
		"user":    user,
	})
}

// LoginUserHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Summary –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Description –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏ –ø–∞—Ä–æ–ª—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω
// @Tags auth
// @Accept json
// @Produce json
// @Param input body models.LoginRequest true "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞"
// @Success 200 {object} map[string]interface{} "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∏ —Ç–æ–∫–µ–Ω"
// @Failure 400 {object} map[string]string "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"
// @Failure 401 {object} map[string]string "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å"
// @Router /auth/login [post]
func (c *AuthController) LoginUserHandler(ctx *gin.Context) {
    var request struct {
        Email string `json:"email"`
        Password string `json:"password"`
    }

    // –ü–∞—Ä—Å–∏–º JSON-–∑–∞–ø—Ä–æ—Å
    if err := ctx.ShouldBindJSON(&request); err != nil {
        ctx.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
        return
    }

    // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    token, err := c.authService.LoginUser(request.Email, request.Password)
    if err != nil {
    	ctx.JSON(http.StatusUnauthorized, gin.H{"error": err.Error()})
    	return
    }

    // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
    ctx.JSON(http.StatusOK, gin.H{
        "message": "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
        "token":   token,
    })
}

// MeHandler –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
// @Summary –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Description –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ JWT-—Ç–æ–∫–µ–Ω–∞
// @Tags auth
// @Accept json
// @Produce json
// @Security BearerAuth
// @Success 200 {object} models.User
// @Failure 401 {object} map[string]string
// @Failure 500 {object} map[string]string
// @Router /auth/me [get]
func (c *AuthController) MeHandler(ctx *gin.Context) {
    fmt.Println("üîç MeHandler –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è") // üëà —Å—é–¥–∞

    userID, exists := ctx.Get("user_id")
    if !exists {
        fmt.Println("‚õîÔ∏è user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ context")
        ctx.JSON(http.StatusUnauthorized, gin.H{"error": "User ID not found in context"})
        return
    }

    fmt.Println("‚úÖ user_id:", userID)

    user, err := c.authService.GetUserByID(userID.(string))
    if err != nil {
        fmt.Println("‚õîÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
        ctx.JSON(http.StatusInternalServerError, gin.H{"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"})
        return
    }

    fmt.Println("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user)
    ctx.JSON(http.StatusOK, user)
}

// LogoutHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// @Summary –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
// @Description –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (—Å–µ—Ä–≤–µ—Ä —Ç–æ–∫–µ–Ω—ã –Ω–µ —Ö—Ä–∞–Ω–∏—Ç)
// @Tags auth
// @Security BearerAuth
// @Success 200 {object} map[string]string
// @Router /auth/logout [post]
// LogoutHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (ac *AuthController) LogoutHandler(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"})
}




















